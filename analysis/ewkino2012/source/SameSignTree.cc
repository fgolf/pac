#include "SameSignTree.h"

SameSignTree::SameSignTree ()
{
    lep3 = SingleLeptonTree("lep3_");
}

SameSignTree::SameSignTree (const std::string &prefix)
    : DileptonTree(prefix)
{
    lep3 = SingleLeptonTree("lep3_");
}

void SameSignTree::Reset()
{
    event_info.Reset();
    DileptonTree::Reset();
    lep3.Reset();

    selection                                = 0;
    is_good_lumi                             = true;
    charge_type                              = -999999;
    njets                                    = -999999;
    nbtags                                   = -999999;
    nbtags_loose                             = -999999;
    ttbar_bkdn                               = -999999;
    vtxw                                     = -999999.0;
    mt                                       = -999999.0;
    ht                                       = -999999.0;
    rho                                      = -999999.0;
    rho_iso                                  = -999999.0;
    sf_dileptrig                             = 1.0;
    sf_lepeff                                = 1.0;
    trig_mm                                  = false;
    trig_em                                  = false;
    trig_ee                                  = false;
    trig_mm_mu17_mu8                         = false;
    trig_ee_el17_el8_id_iso                  = false;
    trig_em_mu17_el8_id_iso                  = false;
    trig_em_mu8_el17_id_iso                  = false;
    njets_dn                                 = -999999;
    njets_up                                 = -999999;
    nbtags_dn                                = -999999;
    nbtags_up                                = -999999;
    nbtags_reweighted                        = -999999;
    nbtags_reweighted_dn                     = -999999;
    nbtags_reweighted_up                     = -999999;
    nbtags_reweighted_jec_dn                 = -999999;
    nbtags_reweighted_jec_up                 = -999999;
    ht_dn                                    = -999999.;
    ht_up                                    = -999999.;
    pfmet_dn                                 = -999999.;
    pfmet_up                                 = -999999.;
    pfmet_phi_dn                             = -999999.;
    pfmet_phi_up                             = -999999.;
    sparm0                                   = -999999.0;
    sparm1                                   = -999999.0;
    sparm2                                   = -999999.0;
    sparm3                                   = -999999.0;
    sparm0_name                              = "";
    sparm1_name                              = "";
    sparm2_name                              = "";
    sparm3_name                              = "";
    is_pp                                    = false;
    is_mm                                    = false;
    is_ss                                    = false;
    is_sf                                    = false;
    is_df                                    = false;
    is_os                                    = false;
    em_mufo                                  = false;
    em_elfo                                  = false;
    is_df                                    = false;
    is_gen_pp                                = false;
    is_gen_mm                                = false;
    no_extraz                                = false;
    no_extrag                                = false;
    clean                                    = false;
    hyp_good_vtx                             = false;
    presel                                   = false;
    gen_nbtags                               = -999999;
    gen_njets                                = -999999;
    gen_nleps                                = -999999;
    gen_nmus                                 = -999999;
    gen_nels                                 = -999999;
    gen_ntaus                                = -999999;
    gen_ht                                   = -999999.0;
    lep1_nearjet_p4                          = LorentzVector(0, 0, 0, 0);
    lep1_nearlep_p4                          = LorentzVector(0, 0, 0, 0);
    lep1_wfr                                 = -999999.0;
    lep1_wflip                               = -999999.0;
    lep1_nearjet_dr                          = -999999.0;
    lep1_nearlep_dr                          = -999999.0;
    lep1_nearlep_id                          = -999999;
    lep1_isFromH                             = false;
    lep2_nearjet_p4                          = LorentzVector(0, 0, 0, 0);
    lep2_nearlep_p4                          = LorentzVector(0, 0, 0, 0);
    lep2_wfr                                 = -999999.0;
    lep2_wflip                               = -999999.0;
    lep2_nearjet_dr                          = -999999.0;
    lep2_nearlep_id                          = -999999;
    lep2_isFromH                             = false;
    jets_dr12                                = -999999.0;
    dijet_mass                               = -999999.0;
    gen_lep1_p4                              = LorentzVector(0, 0, 0, 0);
    gen_lep1_pdgid                           = -999999;
    gen_lep2_p4                              = LorentzVector(0, 0, 0, 0);
    gen_lep2_pdgid                           = -999999;
    gen_dilep_p4                             = LorentzVector(0, 0, 0, 0);
    gen_dilep_type                           = at::DileptonHypType::static_size;
    gen_dilep_mass                           = -999999.0;
    gen_dilep_dphi                           = -999999.0;
    gen_dilep_deta                           = -999999.0;
    gen_dilep_dr                             = -999999.0;
    passes_isotrk_veto                       = false;
    passes_tau_veto                          = false;
    njets_pv_tight0                          = 0;
    njets_pv_tight1                          = 0;
    njets_pv_tight2                          = 0;

    vjets_p4.clear();
    vjets_p4_up.clear();
    vjets_p4_dn.clear();
    vjets_mcflavor_phys.clear();
    vjets_mcflavor_algo.clear();
    vjets_mcflavor_phys_up.clear();
    vjets_mcflavor_algo_up.clear();
    vjets_mcflavor_phys_dn.clear();
    vjets_mcflavor_algo_dn.clear();
    vgenjets_p4.clear();
    vjets_nearjet_p4.clear();
    vjets_nearjet_dr.clear();
    vjets_mc3id.clear();
    vjets_momid.clear();
    vjets_mc3p4.clear();
    vjets_bdisc.clear();

    pfcandid5          = -999999;     
    pfcandid10         = -999999;     
    pfcanddirid10      = -999999;     
    pfcandvetoid10     = -999999;     
    pfcandvetoLid10    = -999999;     
    pfcandidOS10       = -999999;  
    pfcandidOS10looseZ = -999999;  
    pfcandid5looseZ    = -999999;     

    trkpt5              = 999999.;
    mleptrk5            = 999999.;
    trkreliso5          = 999999.;
    trkpt10             = 999999.;
    mleptrk10           = 999999.;
    trkreliso10         = 999999.;
    trkpt5loose         = 999999.;
    trkreliso5loose     = 999999.;
    trkpt10loose        = 999999.;
    trkreliso10loose    = 999999.;
    trkpt10pt0p1        = 999999.;
    trkreliso10pt0p1    = 999999.;
    trkpt10pt0p2        = 999999.;
    trkreliso10pt0p2    = 999999.;
    trkpt10pt0p3        = 999999.;
    trkreliso10pt0p3    = 999999.;
    trkpt10pt0p4        = 999999.;
    trkreliso10pt0p4    = 999999.;
    trkpt10pt0p5        = 999999.;
    trkreliso10pt0p5    = 999999.;
    trkpt10pt0p6        = 999999.;
    trkreliso10pt0p6    = 999999.;
    trkpt10pt0p7        = 999999.;
    trkreliso10pt0p7    = 999999.;
    trkpt10pt0p8        = 999999.;
    trkreliso10pt0p8    = 999999.;
    trkpt10pt0p9        = 999999.;
    trkreliso10pt0p9    = 999999.;
    trkpt10pt1p0        = 999999.;
    trkreliso10pt1p0    = 999999.;
    pfcandiso5          = 999999.;     
    pfcandiso10         = 999999.;     
    pfcanddiriso10      = 999999.;     
    pfcandvetoiso10     = 999999.;     
    pfcandvetoLiso10    = 999999.;     
    pfcandisoOS10       = 999999.;     
    pfcandisoOS10looseZ = 999999.;     
    pfcandiso5looseZ    = 999999.;     
    pfcandpt5           = 999999.;
    pfcandpt10          = 999999.;
    pfcanddirpt10       = 999999.;
    pfcandvetopt10      = 999999.;
    pfcandvetoLpt10     = 999999.;
    pfcandptOS10        = 999999.;
    pfcandptOS10looseZ  = 999999.;
    pfcandpt5looseZ     = 999999.;
    pfcanddz5           = 999999.;
    pfcanddz10          = 999999.;
    pfcanddirdz10       = 999999.;
    pfcandvetodz10      = 999999.;
    pfcandvetoLdz10     = 999999.;
    pfcanddzOS10        = 999999.;
    pfcanddzOS10looseZ  = 999999.;
    pfcanddz5looseZ     = 999999.;
    pfcandmindrj5       = 999999.;
    pfcandmindrj10      = 999999.;
    pfcanddirmindrj10   = 999999.;
    pfcandvetomindrj10  = 999999.;
    pfcandvetoLmindrj10 = 999999.;
    pfcandpt10pt0p1     = 999999.;
    pfcandiso10pt0p1    = 999999.;
    pfcandpt10pt0p2     = 999999.;
    pfcandiso10pt0p2    = 999999.;
    pfcandpt10pt0p3     = 999999.;
    pfcandiso10pt0p3    = 999999.;
    pfcandpt10pt0p4     = 999999.;
    pfcandiso10pt0p4    = 999999.;
    pfcandpt10pt0p5     = 999999.;
    pfcandiso10pt0p5    = 999999.;
    pfcandpt10pt0p6     = 999999.;
    pfcandiso10pt0p6    = 999999.;
    pfcandpt10pt0p7     = 999999.;
    pfcandiso10pt0p7    = 999999.;
    pfcandpt10pt0p8     = 999999.;
    pfcandiso10pt0p8    = 999999.;
    pfcandpt10pt0p9     = 999999.;
    pfcandiso10pt0p9    = 999999.;
    pfcandpt10pt1p0     = 999999.;
    pfcandiso10pt1p0    = 999999.;

    pfcand5          = LorentzVector(0., 0., 0., 0.);
    pfcand10         = LorentzVector(0., 0., 0., 0.);
    pfcanddir10      = LorentzVector(0., 0., 0., 0.);
    pfcandveto10     = LorentzVector(0., 0., 0., 0.);
    pfcandvetoL10    = LorentzVector(0., 0., 0., 0.);
    pfcandOS10       = LorentzVector(0., 0., 0., 0.);
    pfcandOS10looseZ = LorentzVector(0., 0., 0., 0.);
    pfcand5looseZ    = LorentzVector(0., 0., 0., 0.);

    pfTau15_leadPtcandID    = -999999;
    pfTau_leadPtcandID      = -999999;
    pfTauLoose_leadPtcandID = -999999;

    pfTau15               = LorentzVector(0., 0., 0., 0.);
    pfTau15_leadPtcand    = LorentzVector(0., 0., 0., 0.);
    pfTau                 = LorentzVector(0., 0., 0., 0.);
    pfTau_leadPtcand      = LorentzVector(0., 0., 0., 0.);
    pfTauLoose            = LorentzVector(0., 0., 0., 0.);
    pfTauLoose_leadPtcand = LorentzVector(0., 0., 0., 0.);

    pfjets_beta.clear();
    pfjets_beta2.clear();
    pfjets_beta_0p1.clear();
    pfjets_beta_0p2.clear();
    pfjets_beta2_0p1.clear();
    pfjets_beta2_0p5.clear();
    pfjets_mvaPUid.clear();
    pfjets_mva5xPUid.clear();
    pfjets_mvaBeta.clear();
}

void SameSignTree::SetBranches(TTree &tree)
{
    event_info.SetBranches(tree);
    DileptonTree::SetBranches(tree);
    lep3.SetBranches(tree);

    tree.Branch("selection"                , &selection                , "selection/i"                ); 
    tree.Branch("is_good_lumi"             , &is_good_lumi             , "is_good_lumi/O"             ); 
    tree.Branch("charge_type"              , &charge_type              , "charge_type/O"              ); 
    tree.Branch("njets"                    , &njets                    , "njets/I"                    ); 
    tree.Branch("nbtags"                   , &nbtags                   , "nbtags/I"                   ); 
    tree.Branch("nbtags_loose"             , &nbtags_loose             , "nbtags_loose/I"             ); 
    tree.Branch("ttbar_bkdn"               , &ttbar_bkdn               , "ttbar_bkdn/I"               ); 
    tree.Branch("vtxw"                     , &vtxw                     , "vtxw/F"                     ); 
    tree.Branch("mt"                       , &mt                       , "mt/F"                       ); 
    tree.Branch("ht"                       , &ht                       , "ht/F"                       ); 
    tree.Branch("rho"                      , &rho                      , "rho/F"                      ); 
    tree.Branch("rho_iso"                  , &rho_iso                  , "rho_iso/F"                  ); 
    tree.Branch("trig_mm"                  , &trig_mm                  , "trig_mm/O"                  ); 
    tree.Branch("trig_em"                  , &trig_em                  , "trig_em/O"                  ); 
    tree.Branch("trig_ee"                  , &trig_ee                  , "trig_ee/O"                  ); 
    tree.Branch("trig_mm_mu17_mu8"         , &trig_mm_mu17_mu8         , "trig_mm_mu17_mu8/O"         ); 
    tree.Branch("trig_ee_el17_el8_id_iso"  , &trig_ee_el17_el8_id_iso  , "trig_ee_el17_el8_id_iso/O"  ); 
    tree.Branch("trig_em_mu17_el8_id_iso"  , &trig_em_mu17_el8_id_iso  , "trig_em_mu17_el8_id_iso/O"  ); 
    tree.Branch("trig_em_mu8_el17_id_iso"  , &trig_em_mu8_el17_id_iso  , "trig_em_mu8_el17_id_iso/O"  ); 
    tree.Branch("njets_dn"                 , &njets_dn                 , "njets_dn/I"                 ); 
    tree.Branch("njets_up"                 , &njets_up                 , "njets_up/I"                 ); 
    tree.Branch("nbtags_dn"                , &nbtags_dn                , "nbtags_dn/I"                ); 
    tree.Branch("nbtags_up"                , &nbtags_up                , "nbtags_up/I"                ); 
    tree.Branch("ht_dn"                    , &ht_dn                    , "ht_dn/F"                    ); 
    tree.Branch("ht_up"                    , &ht_up                    , "ht_up/F"                    ); 
    tree.Branch("nbtags_reweighted"        , &nbtags_reweighted        , "nbtags_reweighted/I"        ); 
    tree.Branch("nbtags_reweighted_dn"     , &nbtags_reweighted_dn     , "nbtags_reweighted_dn/I"     ); 
    tree.Branch("nbtags_reweighted_up"     , &nbtags_reweighted_up     , "nbtags_reweighted_up/I"     ); 
    tree.Branch("nbtags_reweighted_jec_dn" , &nbtags_reweighted_jec_dn , "nbtags_reweighted_jec_dn/I" ); 
    tree.Branch("nbtags_reweighted_jec_up" , &nbtags_reweighted_jec_up , "nbtags_reweighted_jec_up/I" ); 
    tree.Branch("pfmet_dn"                 , &pfmet_dn                 , "pfmet_dn/F"                 ); 
    tree.Branch("pfmet_up"                 , &pfmet_up                 , "pfmet_up/F"                 ); 
    tree.Branch("pfmet_phi_dn"             , &pfmet_phi_dn             , "pfmet_phi_dn/F"             ); 
    tree.Branch("pfmet_phi_up"             , &pfmet_phi_up             , "pfmet_phi_up/F"             ); 
    tree.Branch("sf_dileptrig"             , &sf_dileptrig             , "sf_dileptrig/F"             ); 
    tree.Branch("sf_lepeff"                , &sf_lepeff                , "sf_lepeff/F"                ); 
    tree.Branch("sparm0"                   , &sparm0                   , "sparm0/F"                   ); 
    tree.Branch("sparm1"                   , &sparm1                   , "sparm1/F"                   ); 
    tree.Branch("sparm2"                   , &sparm2                   , "sparm2/F"                   ); 
    tree.Branch("sparm3"                   , &sparm3                   , "sparm3/F"                   ); 
    tree.Branch("sparm0_name"              , "TString"                 , &sparm0_name                 ); 
    tree.Branch("sparm1_name"              , "TString"                 , &sparm1_name                 ); 
    tree.Branch("sparm2_name"              , "TString"                 , &sparm2_name                 ); 
    tree.Branch("sparm3_name"              , "TString"                 , &sparm3_name                 ); 
    tree.Branch("is_pp"                    , &is_pp                    , "is_pp/O"                    ); 
    tree.Branch("is_mm"                    , &is_mm                    , "is_mm/O"                    ); 
    tree.Branch("is_ss"                    , &is_ss                    , "is_ss/O"                    ); 
    tree.Branch("is_sf"                    , &is_sf                    , "is_sf/O"                    ); 
    tree.Branch("is_df"                    , &is_df                    , "is_df/O"                    ); 
    tree.Branch("is_os"                    , &is_os                    , "is_os/O"                    ); 
    tree.Branch("no_extraz"                , &no_extraz                , "no_extraz/O"                ); 
    tree.Branch("no_extrag"                , &no_extrag                , "no_extrag/O"                ); 
    tree.Branch("clean"                    , &clean                    , "clean/O"                    ); 
    tree.Branch("presel"                   , &presel                   , "presel/O"                   ); 
    tree.Branch("em_mufo"                  , &em_mufo                  , "em_mufo/O"                  ); 
    tree.Branch("em_elfo"                  , &em_elfo                  , "em_elfo/O"                  ); 
    tree.Branch("hyp_good_vtx"             , &hyp_good_vtx             , "hyp_good_vtx/O"             ); 
    tree.Branch("is_gen_pp"                , &is_gen_pp                , "is_gen_pp/O"                ); 
    tree.Branch("is_gen_mm"                , &is_gen_mm                , "is_gen_mm/O"                ); 
    tree.Branch("gen_njets"                , &gen_njets                , "gen_njets/I"                ); 
    tree.Branch("gen_nleps"                , &gen_nleps                , "gen_nleps/I"                ); 
    tree.Branch("gen_nmus"                 , &gen_nmus                 , "gen_nmus/I"                 ); 
    tree.Branch("gen_nels"                 , &gen_nels                 , "gen_nels/I"                 ); 
    tree.Branch("gen_ntaus"                , &gen_ntaus                , "gen_ntaus/I"                ); 
    tree.Branch("gen_ht"                   , &gen_ht                   , "gen_ht/F"                   ); 
    tree.Branch("lep1_nearjet_p4"          , "LorentzVector"           , &lep1_nearjet_p4             ); 
    tree.Branch("lep1_nearlep_p4"          , "LorentzVector"           , &lep1_nearlep_p4             ); 
    tree.Branch("lep1_wfr"                 , &lep1_wfr                 , "lep1_wfr/F"                 ); 
    tree.Branch("lep1_wflip"               , &lep1_wflip               , "lep1_wflip/F"               ); 
    tree.Branch("lep1_nearjet_dr"          , &lep1_nearjet_dr          , "lep1_nearjet_dr/F"          ); 
    tree.Branch("lep1_nearlep_dr"          , &lep1_nearlep_dr          , "lep1_nearlep_dr/F"          ); 
    tree.Branch("lep1_nearlep_id"          , &lep1_nearlep_id          , "lep1_nearlep_id/I"          ); 
    tree.Branch("lep1_isFromH"             , &lep1_isFromH             , "lep1_isFromH/O"             ); 
    tree.Branch("lep2_nearjet_p4"          , "LorentzVector"           , &lep2_nearjet_p4             ); 
    tree.Branch("lep2_nearlep_p4"          , "LorentzVector"           , &lep2_nearlep_p4             ); 
    tree.Branch("lep2_wfr"                 , &lep2_wfr                 , "lep2_wfr/F"                 ); 
    tree.Branch("lep2_wflip"               , &lep2_wflip               , "lep2_wflip/F"               ); 
    tree.Branch("lep2_nearjet_dr"          , &lep2_nearjet_dr          , "lep2_nearjet_dr/F"          ); 
    tree.Branch("lep2_nearlep_dr"          , &lep2_nearlep_dr          , "lep2_nearlep_dr/F"          ); 
    tree.Branch("lep2_nearlep_id"          , &lep2_nearlep_id          , "lep2_nearlep_id/I"          );
    tree.Branch("lep2_isFromH"             , &lep2_isFromH             , "lep2_isFromH/O"             );  
    tree.Branch("jets_dr12"                , &jets_dr12                , "jets_dr12/F"                ); 
    tree.Branch("dijet_mass"               , &dijet_mass               , "dijet_mass/F"               ); 
    tree.Branch("vjets_p4"                 , "vecLorentzVector"        , &vjets_p4                    ); 
    tree.Branch("vjets_p4_up"              , "vecLorentzVector"        , &vjets_p4_up                 ); 
    tree.Branch("vjets_p4_dn"              , "vecLorentzVector"        , &vjets_p4_dn                 ); 
    tree.Branch("vjets_mcflavor_phys"      , "veci"                    , &vjets_mcflavor_phys         ); 
    tree.Branch("vjets_mcflavor_algo"      , "veci"                    , &vjets_mcflavor_algo         ); 
    tree.Branch("vjets_mcflavor_phys_up"   , "veci"                    , &vjets_mcflavor_phys_up      ); 
    tree.Branch("vjets_mcflavor_algo_up"   , "veci"                    , &vjets_mcflavor_algo_up      ); 
    tree.Branch("vjets_mcflavor_phys_dn"   , "veci"                    , &vjets_mcflavor_phys_dn      ); 
    tree.Branch("vjets_mcflavor_algo_dn"   , "veci"                    , &vjets_mcflavor_algo_dn      ); 
    tree.Branch("vjets_mc3p4"              , "vecLorentzVector"        , &vjets_mc3p4                 ); 
    tree.Branch("vgenjets_p4"              , "vecLorentzVector"        , &vgenjets_p4                 ); 
    tree.Branch("vjets_mc3id"              , "veci"                    , &vjets_mc3id                 ); 
    tree.Branch("vjets_momid"              , "veci"                    , &vjets_momid                 ); 
    tree.Branch("vjets_nearjet_p4"         , "vecLorentzVector"        , &vjets_nearjet_p4            ); 
    tree.Branch("vjets_nearjet_dr"         , "vecd"                    , &vjets_nearjet_dr            ); 
    tree.Branch("vjets_bdisc"              , "vecd"                    , &vjets_bdisc                 );
    tree.Branch("gen_lep1_p4"              , "LorentzVector"           , &gen_lep1_p4                 ); 
    tree.Branch("gen_lep1_pdgid"           , &gen_lep1_pdgid           , "gen_lep1_pdgid/I"           ); 
    tree.Branch("gen_lep2_p4"              , "LorentzVector"           , &gen_lep2_p4                 ); 
    tree.Branch("gen_lep2_pdgid"           , &gen_lep2_pdgid           , "gen_lep2_pdgid/I"           ); 
    tree.Branch("gen_dilep_p4"             , "LorentzVector"           , &gen_dilep_p4                ); 
    tree.Branch("gen_dilep_type"           , &gen_dilep_type           , "gen_dilep_type/I"           ); 
    tree.Branch("gen_dilep_mass"           , &gen_dilep_mass           , "gen_dilep_mass/F"           ); 
    tree.Branch("gen_dilep_dphi"           , &gen_dilep_dphi           , "gen_dilep_dphi/F"           ); 
    tree.Branch("gen_dilep_deta"           , &gen_dilep_deta           , "gen_dilep_deta/F"           ); 
    tree.Branch("gen_dilep_dr"             , &gen_dilep_dr             , "gen_dilep_dr/F"             ); 
    tree.Branch("pfcandid5"                , &pfcandid5                , "pfcandid5/I"                );     
    tree.Branch("pfcandid10"               , &pfcandid10               , "pfcandid10/I"               );     
    tree.Branch("pfcanddirid10"            , &pfcanddirid10            , "pfcanddirid10/I"            );     
    tree.Branch("pfcandvetoid10"           , &pfcandvetoid10           , "pfcandvetoid10/I"           );     
    tree.Branch("pfcandvetoLid10"          , &pfcandvetoLid10          , "pfcandvetoLid10/I"          );     
    tree.Branch("pfcandidOS10"             , &pfcandidOS10             , "pfcandidOS10/I"             );  
    tree.Branch("pfcandidOS10looseZ"       , &pfcandidOS10looseZ       , "pfcandidOS10looseZ/I"       );  
    tree.Branch("pfcandid5looseZ"          , &pfcandid5looseZ          , "pfcandid5looseZ/I"          );     
    tree.Branch("trkpt5"                   , &trkpt5                   , "trkpt5/F"                   );
    tree.Branch("mleptrk5"                 , &mleptrk5                 , "mleptrk5/F"                 );
    tree.Branch("trkreliso5"               , &trkreliso5               , "trkreliso5/F"               );
    tree.Branch("trkpt10"                  , &trkpt10                  , "trkpt10/F"                  );
    tree.Branch("mleptrk10"                , &mleptrk10                , "mleptrk10/F"                );
    tree.Branch("trkreliso10"              , &trkreliso10              , "trkreliso10/F"              );
    tree.Branch("trkpt5loose"              , &trkpt5loose              , "trkpt5loose/F"              );
    tree.Branch("trkreliso5loose"          , &trkreliso5loose          , "trkreliso5loose/F"          );
    tree.Branch("trkpt10loose"             , &trkpt10loose             , "trkpt10loose/F"             );
    tree.Branch("trkreliso10loose"         , &trkreliso10loose         , "trkreliso10loose/F"         );
    tree.Branch("trkpt10pt0p1"             , &trkpt10pt0p1             , "trkpt10pt0p1/F"             );
    tree.Branch("trkreliso10pt0p1"         , &trkreliso10pt0p1         , "trkreliso10pt0p1/F"         );
    tree.Branch("trkpt10pt0p2"             , &trkpt10pt0p2             , "trkpt10pt0p2/F"             );
    tree.Branch("trkreliso10pt0p2"         , &trkreliso10pt0p2         , "trkreliso10pt0p2/F"         );
    tree.Branch("trkpt10pt0p3"             , &trkpt10pt0p3             , "trkpt10pt0p3/F"             );
    tree.Branch("trkreliso10pt0p3"         , &trkreliso10pt0p3         , "trkreliso10pt0p3/F"         );
    tree.Branch("trkpt10pt0p4"             , &trkpt10pt0p4             , "trkpt10pt0p4/F"             );
    tree.Branch("trkreliso10pt0p4"         , &trkreliso10pt0p4         , "trkreliso10pt0p4/F"         );
    tree.Branch("trkpt10pt0p5"             , &trkpt10pt0p5             , "trkpt10pt0p5/F"             );
    tree.Branch("trkreliso10pt0p5"         , &trkreliso10pt0p5         , "trkreliso10pt0p5/F"         );
    tree.Branch("trkpt10pt0p6"             , &trkpt10pt0p6             , "trkpt10pt0p6/F"             );
    tree.Branch("trkreliso10pt0p6"         , &trkreliso10pt0p6         , "trkreliso10pt0p6/F"         );
    tree.Branch("trkpt10pt0p7"             , &trkpt10pt0p7             , "trkpt10pt0p7/F"             );
    tree.Branch("trkreliso10pt0p7"         , &trkreliso10pt0p7         , "trkreliso10pt0p7/F"         );
    tree.Branch("trkpt10pt0p8"             , &trkpt10pt0p8             , "trkpt10pt0p8/F"             );
    tree.Branch("trkreliso10pt0p8"         , &trkreliso10pt0p8         , "trkreliso10pt0p8/F"         );
    tree.Branch("trkpt10pt0p9"             , &trkpt10pt0p9             , "trkpt10pt0p9/F"             );
    tree.Branch("trkreliso10pt0p9"         , &trkreliso10pt0p9         , "trkreliso10pt0p9/F"         );
    tree.Branch("trkpt10pt1p0"             , &trkpt10pt1p0             , "trkpt10pt1p0/F"             );
    tree.Branch("trkreliso10pt1p0"         , &trkreliso10pt1p0         , "trkreliso10pt1p0/F"         );
    tree.Branch("pfcandiso5"               , &pfcandiso5               , "pfcandiso5/F"               );     
    tree.Branch("pfcandiso10"              , &pfcandiso10              , "pfcandiso10/F"              );     
    tree.Branch("pfcanddiriso10"           , &pfcanddiriso10           , "pfcanddiriso10/F"           );     
    tree.Branch("pfcandvetoiso10"          , &pfcandvetoiso10          , "pfcandvetoiso10/F"          );     
    tree.Branch("pfcandvetoLiso10"         , &pfcandvetoLiso10         , "pfcandvetoLiso10/F"         );     
    tree.Branch("pfcandisoOS10"            , &pfcandisoOS10            , "pfcandisoOS10/F"            );     
    tree.Branch("pfcandisoOS10looseZ"      , &pfcandisoOS10looseZ      , "pfcandisoOS10looseZ/F"      );     
    tree.Branch("pfcandiso5looseZ"         , &pfcandiso5looseZ         , "pfcandiso5looseZ/F"         );     
    tree.Branch("pfcandpt5"                , &pfcandpt5                , "pfcandpt5/F"                );
    tree.Branch("pfcandpt10"               , &pfcandpt10               , "pfcandpt10/F"               );
    tree.Branch("pfcanddirpt10"            , &pfcanddirpt10            , "pfcanddirpt10/F"            );
    tree.Branch("pfcandvetopt10"           , &pfcandvetopt10           , "pfcandvetopt10/F"           );
    tree.Branch("pfcandvetoLpt10"          , &pfcandvetoLpt10          , "pfcandvetoLpt10/F"          );
    tree.Branch("pfcandptOS10"             , &pfcandptOS10             , "pfcandptOS10/F"             );
    tree.Branch("pfcandptOS10looseZ"       , &pfcandptOS10looseZ       , "pfcandptOS10looseZ/F"       );
    tree.Branch("pfcandpt5looseZ"          , &pfcandpt5looseZ          , "pfcandpt5looseZ/F"          );
    tree.Branch("pfcanddz5"                , &pfcanddz5                , "pfcanddz5/F"                );
    tree.Branch("pfcanddz10"               , &pfcanddz10               , "pfcanddz10/F"               );
    tree.Branch("pfcanddirdz10"            , &pfcanddirdz10            , "pfcanddirdz10/F"            );
    tree.Branch("pfcandvetodz10"           , &pfcandvetodz10           , "pfcandvetodz10/F"           );
    tree.Branch("pfcandvetoLdz10"          , &pfcandvetoLdz10          , "pfcandvetoLdz10/F"          );
    tree.Branch("pfcanddzOS10"             , &pfcanddzOS10             , "pfcanddzOS10/F"             );
    tree.Branch("pfcanddzOS10looseZ"       , &pfcanddzOS10looseZ       , "pfcanddzOS10looseZ/F"       );
    tree.Branch("pfcanddz5looseZ"          , &pfcanddz5looseZ          , "pfcanddz5looseZ/F"          );
    tree.Branch("pfcandmindrj5"            , &pfcandmindrj5            , "pfcandmindrj5/F"            );
    tree.Branch("pfcandmindrj10"           , &pfcandmindrj10           , "pfcandmindrj10/F"           );
    tree.Branch("pfcanddirmindrj10"        , &pfcanddirmindrj10        , "pfcanddirmindrj10/F"        );
    tree.Branch("pfcandvetomindrj10"       , &pfcandvetomindrj10       , "pfcandvetomindrj10/F"       );
    tree.Branch("pfcandvetoLmindrj10"      , &pfcandvetoLmindrj10      , "pfcandvetoLmindrj10/F"      );
    tree.Branch("pfcandpt10pt0p1"          , &pfcandpt10pt0p1          , "pfcandpt10pt0p1/F"          );
    tree.Branch("pfcandiso10pt0p1"         , &pfcandiso10pt0p1         , "pfcandiso10pt0p1/F"         );
    tree.Branch("pfcandpt10pt0p2"          , &pfcandpt10pt0p2          , "pfcandpt10pt0p2/F"          );
    tree.Branch("pfcandiso10pt0p2"         , &pfcandiso10pt0p2         , "pfcandiso10pt0p2/F"         );
    tree.Branch("pfcandpt10pt0p3"          , &pfcandpt10pt0p3          , "pfcandpt10pt0p3/F"          );
    tree.Branch("pfcandiso10pt0p3"         , &pfcandiso10pt0p3         , "pfcandiso10pt0p3/F"         );
    tree.Branch("pfcandpt10pt0p4"          , &pfcandpt10pt0p4          , "pfcandpt10pt0p4/F"          );
    tree.Branch("pfcandiso10pt0p4"         , &pfcandiso10pt0p4         , "pfcandiso10pt0p4/F"         );
    tree.Branch("pfcandpt10pt0p5"          , &pfcandpt10pt0p5          , "pfcandpt10pt0p5/F"          );
    tree.Branch("pfcandiso10pt0p5"         , &pfcandiso10pt0p5         , "pfcandiso10pt0p5/F"         );
    tree.Branch("pfcandpt10pt0p6"          , &pfcandpt10pt0p6          , "pfcandpt10pt0p6/F"          );
    tree.Branch("pfcandiso10pt0p6"         , &pfcandiso10pt0p6         , "pfcandiso10pt0p6/F"         );
    tree.Branch("pfcandpt10pt0p7"          , &pfcandpt10pt0p7          , "pfcandpt10pt0p7/F"          );
    tree.Branch("pfcandiso10pt0p7"         , &pfcandiso10pt0p7         , "pfcandiso10pt0p7/F"         );
    tree.Branch("pfcandpt10pt0p8"          , &pfcandpt10pt0p8          , "pfcandpt10pt0p8/F"          );
    tree.Branch("pfcandiso10pt0p8"         , &pfcandiso10pt0p8         , "pfcandiso10pt0p8/F"         );
    tree.Branch("pfcandpt10pt0p9"          , &pfcandpt10pt0p9          , "pfcandpt10pt0p9/F"          );
    tree.Branch("pfcandiso10pt0p9"         , &pfcandiso10pt0p9         , "pfcandiso10pt0p9/F"         );
    tree.Branch("pfcandpt10pt1p0"          , &pfcandpt10pt1p0          , "pfcandpt10pt1p0/F"          );
    tree.Branch("pfcandiso10pt1p0"         , &pfcandiso10pt1p0         , "pfcandiso10pt1p0/F"         );
    tree.Branch("pfcand5"                  , "LorentzVector"           , &pfcand5                     );
    tree.Branch("pfcand10"                 , "LorentzVector"           , &pfcand10                    );
    tree.Branch("pfcanddir10"              , "LorentzVector"           , &pfcanddir10                 );
    tree.Branch("pfcandveto10"             , "LorentzVector"           , &pfcandveto10                );
    tree.Branch("pfcandvetoL10"            , "LorentzVector"           , &pfcandvetoL10               );
    tree.Branch("pfcandOS10"               , "LorentzVector"           , &pfcandOS10                  );
    tree.Branch("pfcandOS10looseZ"         , "LorentzVector"           , &pfcandOS10looseZ            );
    tree.Branch("pfcand5looseZ"            , "LorentzVector"           , &pfcand5looseZ               );
    tree.Branch("pfTau15_leadPtcandID"     , &pfTau15_leadPtcandID     , "pfTau15_leadPtcandID/I"     );
    tree.Branch("pfTau_leadPtcandID"       , &pfTau_leadPtcandID       , "pfTau_leadPtcandID/I"       );
    tree.Branch("pfTauLoose_leadPtcandID"  , &pfTauLoose_leadPtcandID  , "pfTauLoose_leadPtcandID/I"  );
    tree.Branch("pfTau15"                  , "LorentzVector"           , &pfTau15                     );
    tree.Branch("pfTau15_leadPtcand"       , "LorentzVector"           , &pfTau15_leadPtcand          );
    tree.Branch("pfTau"                    , "LorentzVector"           , &pfTau                       );
    tree.Branch("pfTau_leadPtcand"         , "LorentzVector"           , &pfTau_leadPtcand            );
    tree.Branch("pfTauLoose"               , "LorentzVector"           , &pfTauLoose                  );
    tree.Branch("pfTauLoose_leadPtcand"    , "LorentzVector"           , &pfTauLoose_leadPtcand       );
    tree.Branch("pfjets_beta"              , "vecd"                    , &pfjets_beta                 );
    tree.Branch("pfjets_beta2"             , "vecd"                    , &pfjets_beta2                );
    tree.Branch("pfjets_beta_0p1"          , "vecd"                    , &pfjets_beta_0p1             );
    tree.Branch("pfjets_beta_0p2"          , "vecd"                    , &pfjets_beta_0p2             );
    tree.Branch("pfjets_beta2_0p1"         , "vecd"                    , &pfjets_beta2_0p1            );
    tree.Branch("pfjets_beta2_0p5"         , "vecd"                    , &pfjets_beta2_0p5            );
    tree.Branch("pfjets_mvaPUid"           , "vecd"                    , &pfjets_mvaPUid              );
    tree.Branch("pfjets_mva5xPUid"         , "vecd"                    , &pfjets_mva5xPUid            );
    tree.Branch("pfjets_mvaBeta"           , "vecd"                    , &pfjets_mvaBeta              );
    tree.Branch("passes_isotrk_veto"       , &passes_isotrk_veto       , "passes_isotrk_veto/O"       );
    tree.Branch("passes_tau_veto"          , &passes_tau_veto          , "passes_tau_veto/O"          );
    tree.Branch("njets_pv_tight0"          , &njets_pv_tight0          , "njets_pv_tight0/I"          );
    tree.Branch("njets_pv_tight1"          , &njets_pv_tight1          , "njets_pv_tight1/I"          );
    tree.Branch("njets_pv_tight2"          , &njets_pv_tight2          , "njets_pv_tight2/I"          );
}
