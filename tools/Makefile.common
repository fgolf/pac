# 
# base directory for the project
#project_dir := $(HOME)/devel/UserCode/FGolf/pac
project_dir := $(PAC)

# project directory structure 
# ----------------------------------------------------------------------- #

project_bin := $(project_dir)/bin 
project_tmp := $(project_dir)/bin/tmp 
project_lib := $(project_dir)/lib 
project_obj := $(project_tmp)
project_dep := $(project_tmp)
project_ext := $(project_dir)/externals

# ROOT includes
# ----------------------------------------------------------------------- #

include $(project_ext)/build/root/Makefile.arch

# constants 
# ----------------------------------------------------------------------- #

MV    := mv -f
CP    := cp -r
RM    := rm -f
SED   := sed
MKDIR := mkdir -p
RMDIR := rm -rf 

# reusable libraries
# ----------------------------------------------------------------------- #

# include the BOOST c++ libraries
define include_boost_libs
	BOOST_CURRENT ?= /home/users/rwkelley/code/boost/1.49.0
	CPPFLAGS      += $(addprefix -I,$(BOOST_CURRENT))
	LDFLAGS       += -L$(BOOST_CURRENT)/stage/lib
	LDFLAGS       += -lboost_program_options 
	LDFLAGS       += -lboost_filesystem 
	LDFLAGS       += -lboost_system
endef

# include RootTools
define include_root_tools
	CPPFLAGS      += $(addprefix -I,$(project_dir)/packages/RootTools/include)
	CPPFLAGS      += $(addprefix -I,$(project_dir)/packages/RootTools/source)
	LDFLAGS       += -L$(project_lib)
	LDFLAGS       += -lRootTools
endef

# include AnalysisTools
define include_analysis_tools
	CPPFLAGS      += $(addprefix -I,$(project_dir)/packages/AnalysisTools/include)
	CPPFLAGS      += $(addprefix -I,$(project_dir)/packages/AnalysisTools/source)
	LDFLAGS       += -L$(project_lib)
	LDFLAGS       += -lAnalysisTools
endef

# include CMS2 Headers
cms2_header_tag := 05.03.09
define include_cms2_header
	CPPFLAGS      += $(addprefix -I,$(project_dir)/packages/cms2/$(cms2_header_tag)/header)
	CPPFLAGS      += $(addprefix -I,$(project_dir)/packages/cms2/$(cms2_header_tag)/header/fake_dir_since_nobody_knows_proper_code_building_etiquette)
	LDFLAGS       += -L$(project_lib)
	LDFLAGS       += -lCMS2Header
endef

# include CMS2 CORE
define include_cms2_core
	CPPFLAGS      += $(addprefix -I,$(project_dir)/externals/source/cms2_core/HEAD)
	CPPFLAGS      += $(addprefix -I,$(project_dir)/externals/source/cms2_core/HEAD/CORE)
	LDFLAGS       += -L$(project_lib)
	LDFLAGS       += -lCMS2CORE
endef

# include Frank's Tools
define include_fg_tools
	CPPFLAGS      += $(addprefix -I,$(project_dir)/packages/FGTools/include)
	LDFLAGS       += -L$(project_lib)
	LDFLAGS       += -lFGTools
endef

# include MiniFWLite
define include_mini_fwlite
	LDFLAGS       += -L$(project_lib)
	LDFLAGS       += -lMiniFWLite
endef

# include SimpleTable
define include_simple_table
	CPPFLAGS      += $(addprefix -I,$(project_dir)/externals/source/SimpleTable)
	LDFLAGS       += -L$(project_lib)
	LDFLAGS       += -lSimpleTable
endef

## include FakeRateTools
#define include_fake_rate_tools
#	CPPFLAGS      += $(addprefix -I,$(project_dir)/programs/analysis/FakeRateStudy/include)
#	CPPFLAGS      += $(addprefix -I,$(project_dir)/programs/analysis/FakeRateStudy/source)
#	LDFLAGS       += -L$(project_lib)
#	LDFLAGS       += -lFakeRateTools
#endef

# include CMS2 Header
#cms2_header_tag := 05.02.28

# additional global setup 
# ----------------------------------------------------------------------- #

# ROOT libraries  
CPPFLAGS += $(ROOTCFLAGS)
LDFLAGS  += $(ROOTLIBS) 

# default LINK.o is for c compiler -- need to link with c++ compiler
LINK.o   = $(CXX) $(LDFLAGS) $(TARGET_ARCH) 

# make a shared library 
SHAREDLIB.cpp = $(CXX) $(ROOTLIBS) $(CPPFLAGS) $(LDFLAGS) $(SOFLAGS) $(TARGET_ARCH) -fPIC -o
SHAREDLIB.cc  = $(SHAREDLIB.cpp) 

# ROOT is missing the GenVector in its default setup 
LDFLAGS  += -lGenVector -lEG

# resusable macros
# ----------------------------------------------------------------------- #

# create the list of object files to create
# $(call source-to-object, source-file-list, object-file-dir)
define source-to-object
	$(addprefix $(strip $2)/, $(subst .cc,.o,$(sort $(filter %.cc,$(notdir $1)))))
endef

# create the list of dependency files to create
# $(call source-to-dep, source-file-list, dep-file-dir)
define source-to-dep
	$(addprefix $(strip $2)/, $(subst .cc,.d,$(sort $(filter %.cc,$(notdir $1)))))
endef

# add a path to the beginning with the correct whitespacing
# $(call add-path, prefix, path)
define add-path
	$(addprefix $(strip $1)/,$(2))	
endef

# convert library name to the corresponding root dict name for rootcint generated .cc/.h
# $(call lib-to-rootdict, lib-name, path)
define lib-to-rootdict
	$(call add-path,$2,$(basename $(patsubst lib%,%,$(notdir $1)))__dict.cc)
endef

# $(call root-cint, rootdict, header-file-list, include-dir-list, linkdef, defines)
define root-cint
	mkdir -p $(dir $1)
	rootcint $(strip -v3 -f $1 -c -DNDEBUG $(addprefix -D,$5) $(addprefix -I,$3) $2 $4)
endef


